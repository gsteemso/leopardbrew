#!/usr/bin/ruby

CURL_VERSION    = '7.58.0-1'
CURL_PPC_URL    = "https://archive.org/download/tigerbrew/portable-curl-#{CURL_VERSION}.tiger_g3.bottle.tar.gz"
CURL_PPC_SHA1   = '4ffee9895f2172ff05ba085ce929add46dddc15b'
CURL_INTEL_URL  = "https://archive.org/download/tigerbrew/portable-curl-#{CURL_VERSION}.tiger_i386.bottle.tar.gz"
CURL_INTEL_SHA1 = '6e6e7989adb20856c0473aedecd623f443a6ac55'
DEFAULT_PREFIX  = ENV['HOMEBREW_PREFIX'] || '/usr/local'
DEFAULT_REPO    = ENV['HOMEBREW_REPOSITORY'] || '/Users/Shared/Brewery'

class Array
  def shell_s; cp = dup; first = cp.shift; cp.map{ |arg| arg.gsub ' ', "\\ " }.unshift(first) * ' ' end
end

class String
  def choke; s = chomp; s unless s.empty?; end
end

module Trm extend self  #“Terminal”:  ANSI control sequences
  def csi; "\033["; end  # “Control Sequence Introducer”
  def set_grcm_cumulative ; "#{csi}21h" ; end # “Graphic Rendition Combination Mode”
  def sgr(*list); "#{csi}#{list * ';'}m"; end # “Select Graphic Rendition”
  def rst;  '0'; end # reset
  def bld;  '1'; end
  def uln;  '4'; end
  def blk; '30'; end # black  }
  def red; '31'; end # red    }
  def grn; '32'; end # green  }
  def ylw; '33'; end # yellow }
  def blu; '34'; end # blue   } "display" (foreground) colours.
  def mag; '35'; end # magenta}
  def cyn; '36'; end # cyan   }
  def wht; '37'; end # white  }
  def dft; '39'; end # default}
  def on_blk; '40'; end # black background colour.
  def _rst; sgr(rst, on_blk); end # reset
  def _bld; sgr(bld); end
  def _uln; sgr(uln); end
  def _blk; sgr(blk); end
  def _red; sgr(red); end
  def _grn; sgr(grn); end
  def _ylw; sgr(ylw); end
  def _blu; sgr(blu); end
  def _mag; sgr(mag); end
  def _cyn; sgr(cyn); end
  def _wht; sgr(wht); end
  def _dft; sgr(dft); end
end # Trm

include Trm

def curl
  return @curl if defined? @curl
  fetch_vendor_curl! unless File.readable? '/tmp/curl.tar.gz'
  @curl = "/tmp/#{CURL_VERSION}/bin/curl"
end

def fetch_vendor_curl!
  if `uname -m`.chomp == "Power Macintosh"
    url = CURL_PPC_URL;   sha = CURL_PPC_SHA1
  else
    url = CURL_INTEL_URL; sha = CURL_INTEL_SHA1
  end
  # We must use TenFourFox or some such, because a stock system is now too outdated to
  # download anything.  We’ll then move the downloaded tarball to “/tmp/curl.tar.gz”.
  puts <<-_

Your system will be asked to open a URL to a gzip’d tar archive.  It will
probably try to do so using your web browser.  When the tarball finishes
downloading, you will need to make sure it is in your Downloads folder with
the correct name before installation can proceed.
  _
  wait_for_user
  system 'open', url
  puts <<-_

As described above, use the Finder to make certain that the file has ended up
in your home folder’s Downloads folder, and has this exact name:
    curl.tar.gz
– installation cannot proceed until that file is in that location under that
name.  DO NOT ATTEMPT TO PROCEED UNTIL IT IS IN PLACE.
  _
  wait_for_user
  system 'mv', '~/Downloads/curl.tar.gz', '/tmp/curl.tar.gz'
  our_hash = `openssl sha1 /tmp/curl.tar.gz`.chomp.split(' ').last
  abort <<-_ if our_hash != sha
Unable to verify the integrity of the downloaded curl utility.
The downloaded file’s SHA1 is “#{our_hash}”
but the expected hash is “#{sha}”.
  _
  Dir.chdir '/tmp' { system 'tar', '-xzf', 'curl.tar.gz', '--strip', '1' }
end # fetch_vendor_curl

def getc
  system '/bin/stty raw -echo'
  RUBY_VERSION >= '1.8.7' ? STDIN.getbyte : STDIN.getc
ensure
  system '/bin/stty -raw echo'
end # getc

def git
  @git ||= (g = ENV['GIT'] and File.executable? g ? g : ((g = which 'git') ? g : nil))
  return unless @git
  # Github needs git ≥ 1.7.10 for HTTPS fetches:  https://help.github.com/articles/https-cloning-errors
  `#{@git} --version` =~ /git version (\d\.\d+\.\d+)/
  return if $1 < '1.7.10'
  @git
end # git

def macos_version
  @macos_version ||= /(\d\d\.\d+)(\.\d+)?/.match(`/usr/bin/sw_vers -productVersion`).captures.first.to_f
end

def ohai(arg, *args); puts "#{sgr(cyn, bld)}==>  #{_wht}#{arg}#{_rst}", *args; end

def oho (*args); puts "#{sgr(cyn, bld)}==>  #{_wht}#{args * ' '}#{_rst}"; end

def sudo *args; args.unshift '/usr/bin/sudo'; oho *args; system *args; end

def system *args; abort "Failed during:  #{args * ' '}" unless Kernel.system *args; end

def wait_for_user
  puts "\nPress the space bar to continue, or any other key to abort."; abort unless getc == 32
end

def which cmd
  dir = ENV['PATH'].split(':').find {|p| File.executable? File.join(p, cmd)}
  File.join(dir, cmd) unless dir.nil?
end

####################################################################### script

# Dir.chdir{&block} fails later if Dir.CWD doesn’t exist, which I guess is
# fair enough.  Also sudo prints a warning message for no good reason.
Dir.chdir '/usr'

puts set_grcm_cumulative, sgr(on_blk)

abort "#{_red}Don’t run this as root!#{_rst}" if Process.uid == 0

ohai 'Welcome to the Leopardbrew installer!', <<_

You must choose two important locations in order to proceed:  a /prefix/, and
a /repository/.  (In the ancestor ’brew projects, Homebrew and Tigerbrew, both
were “/usr/local” by default.)
 • The prefix is where the software you install will be put.  Unless you have
   unusual requirements, “/usr/local” is still the best choice.
 • The repository holds the inner workings of Leopardbrew.  We hold that the
   guts of #{_uln}this#{_rst} software should not clutter a well-known directory also used
   by #{_uln}other#{_rst} software, so advise against using “/usr/local”; if nothing else,
   the many other legitimate uses of /usr/local can obfuscate contributions to
   Leopardbrew.  Instead, we recommend using either “/Users/Shared/Brewery” or
   “/usr/local/Brewery”.
Where do you want your prefix?  [hit “return” to keep “#{DEFAULT_PREFIX}”]
_

do 
  HOMEBREW_PREFIX = STDIN.gets.choke || DEFAULT_PREFIX
until HOMEBREW_PREFIX !~ %r{^/[^/]*$}

mkdir_p HOMEBREW_PREFIX unless File.exist?(HOMEBREW_PREFIX)

puts <<_
Using “#{HOMEBREW_PREFIX}” for the prefix.

Where do you want to keep the repository? [hit “return” to keep
“#{DEFAULT_REPO}”]
_

do 
  HOMEBREW_REPOSITORY = STDIN.gets.choke || DEFAULT_REPO
until HOMEBREW_REPOSITORY !~ %r{^/[^/]*$}

mkdir_p HOMEBREW_REPOSITORY unless File.exist?(HOMEBREW_REPOSITORY)

puts "Using “#{HOMEBREW_REPOSITORY}” for the repository."

abort <<EOABORT unless `groups`.split.include? 'admin'
This script may require the user #{ENV['USER']} to be an Administrator.  If
this doesn’t work for you then you can install Homebrew in your home directory
or however you please, but you’ll have to do it by hand.  If you still want to
use this script, set your user to be an Administrator in System Preferences or
`su` to a non-root user with Administrator privileges.
EOABORT

abort <<-EOABORT unless Dir["#{HOMEBREW_REPOSITORY}/.git/*"].empty?
It appears some variety of ’brew is already installed.  If your intent is to
reinstall, you should do the following before running this installer again:
    rm -rf #{HOMEBREW_REPOSITORY}/Cellar #{HOMEBREW_REPOSITORY}/.git && brew cleanup
EOABORT

# Tests will fail if the prefix exists, but we don't have execution
# permissions.  Abort in this case.
abort <<EOABORT if File.directory? HOMEBREW_PREFIX and not File.executable? HOMEBREW_PREFIX
The Homeprew prefix, #{HOMEBREW_PREFIX}, exists but is not searchable.  If this
is not intentional, please restore its permissions as follows and try running
the installer again:
    #{_wht}sudo chmod 755 #{HOMEBREW_PREFIX}#{_rst}
EOABORT

# Tests will fail if the repository exists, but we don't have execution
# permissions. Abort in this case.
abort <<EOABORT if File.directory? HOMEBREW_REPOSITORY and not File.executable? HOMEBREW_REPOSITORY
The Homeprew repository, #{HOMEBREW_REPOSITORY}, exists but is not searchable.
If this is not intentional, please restore its permissions as follows and try
running the installer again:
    #{_wht}sudo chmod 755 #{HOMEBREW_REPOSITORY}#{_rst}
EOABORT

ohai 'This script will install:', <<_

 • #{HOMEBREW_REPOSITORY}/...
 • #{HOMEBREW_REPOSITORY}/Library/...
 • #{HOMEBREW_PREFIX}/bin/brew
 • #{HOMEBREW_PREFIX}/share/doc/homebrew
 • #{HOMEBREW_PREFIX}/share/man/man1/brew.1
(The latter three items will actually be symlinked from
“#{HOMEBREW_REPOSITORY}”.)
_

pchmods = %w(
  . bin etc include lib lib/pkgconfig sbin share var var/log share/locale share/man share/man/man1
  share/man/man2 share/man/man3 share/man/man4 share/man/man5 share/man/man6 share/man/man7
  share/man/man8 share/info share/doc share/aclocal
  ).map{ |d| "#{HOMEBREW_PREFIX}/#{d}" }.select{ |d|
    File.directory? d and (not File.readable? d or not File.writable? d or not File.executable? d)
  }
pchgrps = pchmods.reject{ |d| File.stat(d).grpowned? }

rchmods = %w( . bin Library share ).map{ |d| "#{HOMEBREW_REPOSITORY}/#{d}" }.select{ |d|
    File.directory? d and (not File.readable? d or not File.writable? d or not File.executable? d)
  }
rchgrps = rchmods.reject{ |d| File.stat(d).grpowned? }

ohai 'The following directories will be made group writable:',
  *pchmods, *rchmods unless pchmods.empty? and rchmods.empty?

ohai "The following directories will have their group set to #{sgr(uln, cyn)}admin#{_rst}#{_wht}:",
  *pchgrps, *rchgrps unless pchgrps.empty? and rchgrps.empty?

wait_for_user

unless File.directory? HOMEBREW_PREFIX
  sudo "/bin/mkdir #{HOMEBREW_PREFIX}"
  sudo "/bin/chmod g+rwx #{HOMEBREW_PREFIX}"
  # the group is set to wheel by default for some reason
  sudo "/usr/bin/chgrp admin #{HOMEBREW_PREFIX}"
end

sudo '/bin/chmod', 'g+rwx', *chmods unless chmods.empty?
sudo '/usr/bin/chgrp', 'admin', *chgrps unless chgrps.empty?

unless File.directory? HOMEBREW_REPOSITORY
  sudo "/bin/mkdir #{HOMEBREW_REPOSITORY}"
  sudo "/bin/chmod g+rwx #{HOMEBREW_REPOSITORY}"
  # the group may be set incorrectly by default
  sudo "/usr/bin/chgrp admin #{HOMEBREW_REPOSITORY}"
end

sudo '/bin/chmod', 'g+rwx', *rchmods unless rchmods.empty?
sudo '/usr/bin/chgrp', 'admin', *rchgrps unless rchgrps.empty?

ohai 'Downloading and Installing Homebrew...'
Dir.chdir HOMEBREW_REPOSITORY do
  if git
    # we do it in four steps to avoid merge errors when reinstalling
    system git, 'init', '-q'
    system git, 'remote', 'add', 'origin', 'https://github.com/gsteemso/leopardbrew'

    args = git, 'fetch', 'origin', 'combined:refs/remotes/origin/combined', '-n'
    args << '--depth=1' if ARGV.include? '--fast'
    system *args

    system git, 'reset', '--hard', 'origin/combined'
  else
    curl_flags = 'fsSL'
    # -m to stop tar erroring out if it can't modify the mtime for root owned directories
    system "/bin/bash -c '#{curl} -#{curl_flags} https://github.com/gsteemso/leopardbrew/archive/refs/heads/combined.zip | /usr/bin/tar -xmz --strip 1'"
  end
end

if HOMEBREW_REPOSITORY != HOMEBREW_PREFIX
  # need to symlink bin/*, share/doc/*, and share/man/man1/* into HOMEBREW_PREFIX
  %w( bin share/doc share/man/man1 ).each{|p| system 'ln -s', "#{HOMEBREW_REPOSITORY}/#{p}/*", "#{HOMEBREW_PREFIX}/#{p}/"}  
end

warn "#{HOMEBREW_PREFIX}/bin is not in your PATH." unless ENV['PATH'].split(':').include? "#{HOMEBREW_PREFIX}/bin"

if macos_version < 10.7
  warn 'Now install Xcode: https://developer.apple.com/xcode/' unless File.exist? '/usr/bin/cc'
else
  `/usr/bin/cc --version 2> /dev/null` =~ %r[clang-(\d{2,})]
  version = $1.to_i
  warn %{Install the “Command Line Tools for Xcode”:  http://connect.apple.com} if version < 425
end

ohai 'Installation successful!', <<_
You should run “brew doctor” #{_bld}before#{_rst} you install anything.
Now type:  #{_wht}brew help#{_rst}
_

end
